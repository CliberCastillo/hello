name: DevSecOps CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY_NAME: acrpracticeprod01
  CLUSTER_NAME: akspracticeprod01
  CLUSTER_RESOURCE_GROUP: rsgpracticeprod
  NAMESPACE: hello-app
  APP_NAME: hello-app

jobs:
  build-test:
    name: Build & Test
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Log in to Azure Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY_NAME }}.azurecr.io
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-,format=short
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64

    - name: Scan container image with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:sha-${{ github.sha }}
        format: 'table'
        exit-code: '0'

  # k8s-security:
  #   name: K8s Security Check
  #   runs-on: ubuntu-latest
  #   needs: build-test
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4

  #   - name: Run kubesec scan
  #     run: |
  #       # Install kubesec
  #       curl -sSL https://github.com/controlplaneio/kubesec/releases/latest/download/kubesec_linux_amd64.tar.gz | tar xz
  #       sudo mv kubesec /usr/local/bin/
        
  #       # Scan K8s manifests
  #       kubesec scan k8s/deployment.yaml
  #       kubesec scan k8s/service.yaml

  # deploy-to-aks:
  #   name: Deploy to AKS
  #   runs-on: ubuntu-latest
  #   needs: [build-test, k8s-security]
  #   if: github.ref == 'refs/heads/main'
  #   environment: production
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4

  #   - name: Azure Login
  #     uses: azure/login@v1
  #     with:
  #       creds: ${{ secrets.AZURE_CREDENTIALS }}

  #   - name: Set up kubectl
  #     uses: azure/aks-set-context@v3
  #     with:
  #       resource-group: ${{ env.CLUSTER_RESOURCE_GROUP }}
  #       cluster-name: ${{ env.CLUSTER_NAME }}

  #   - name: Update image tag in manifests
  #     run: |
  #       sed -i "s|acrpracticeprod01.azurecr.io/hello-app:latest|${{ env.REGISTRY_NAME }}.azurecr.io/${{ env.APP_NAME }}:sha-${{ github.sha }}|g" k8s/deployment.yaml

  #   - name: Deploy to AKS
  #     run: |
  #       kubectl apply -f k8s/
  #       kubectl rollout status deployment/hello-deployment -n ${{ env.NAMESPACE }} --timeout=300s
  #       kubectl get pods -n ${{ env.NAMESPACE }}

  #   - name: Verify deployment
  #     run: |
  #       # Wait a bit for service to be ready
  #       sleep 30
        
  #       # Check if pods are running
  #       kubectl get pods -n ${{ env.NAMESPACE }} -l app=hello-app --field-selector=status.phase=Running
        
  #       echo "Deployment completed successfully!"